* IllumiKnight - Indie Top Down RPG*

* Release Process

Use =make linux=, =make windows=,  =make mac=, or =make web= to create targets for each platform, or =make release= to make all four. Check out the makefile for more commands, and remember to edit your game data in it!

* Adjusting the screen size
For those of us working with window managers it would be nice if our games behaved while we are developing. Below is code adapted from Phil's 2022 lisp game jam entry [[https://codeberg.org/technomancy/lisp-jam-2022/src/branch/main/wrap.fnl][https://codeberg.org/technomancy/lisp-jam-2022/src/branch/main/wrap.fnl]] . Adapt it to modify your =wrap.fnl= to handle window resizing automatically and adjust your mouse position.

*Note* this is _not a complete solution_. You still need to handle the translation of =love.mouse.getPos= and =love.graphics.inverseTransform=. But, if your game dosn't use those, the snippet below should work out of the box!

#+BEGIN_SRC fennel
  ;; define the size of your window. From your program's perspective
  ;; your window will always be this size regardless of size
  (local window-w 1280)
  (local window-h 720)
  (var scale 1)
  
  ;; Love provides a handy resize callback. Hook into it to adjust the display size
  ;; of your window.
  (fn love.resize [w h]
    (set scale (math.floor (math.max 1 (math.min (/ w window-w)
                                                 (/ h window-h))))))

  ;; Changing the display size means that you need to translate from the "display size"
  ;; to the size your game thinks the window is.
  (fn love.mousepressed [x y b]
    (when mode.mousepressed
      (safely #(mode.mousepressed (/ x scale) (/ y scale) b set-mode))))

  (fn love.mousemoved [x y dx dy istouch]
    (when mode.mousemoved
      (safely #(mode.mousemoved (/ x scale) (/ y scale) (/ dx scale) (/ dy scale)
                                istouch))))

  (fn love.mousereleased [x y b]
    (when mode.mousereleased
      (safely #(mode.mousereleased (/ x scale) (/ y scale) b set-mode))))

#+END_SRC

* Targeting the development branch of love (12.0) - LINUX ONLY
You can target the development branch of love (version 12.0) by setting the `LOVE_VERSION` parameter in the makefile to 12.0. Note that because we are working from a github artifact, rather than a release, you will also have to pass in your github username and a github PAT.

* Phil's Modal Callbacks (PMC)

Phil Hegelberg's [[https://gitlab.com/technomancy/exo-encounter-667/][exo-encounter-667]] is structured using a modal callback system. Each game state has a mode and each mode has a series of specific callbacks.

If you design your game as a series of states in a very simple state machine, for example *start-screen*, *play* and *end*, with unidirectional progression, you can easily separate the logic for each state into state/mode specific callbacks. As an example, in order to have state dependant rendering that differs between start-screen,play and end you could provide a *draw* callback for each of those states. Similarly if we need state dependent logic and keyboard input we could provide *update* and *keyboard* callbacks. As you iterate you can add and remove callbacks and states/modes as needed with very little friction.
